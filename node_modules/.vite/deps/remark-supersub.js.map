{
  "version": 3,
  "sources": ["../../../../node_modules/remark-supersub/lib/index.js"],
  "sourcesContent": ["/**\n * Subscript and Superscript plugin for Remark.\n */\nimport { visit } from 'unist-util-visit';\nexport default function supersub() {\n    // Superscript\n    return (tree) => {\n        visit(tree, ['text'], (node, i, parent) => {\n            if (node.type !== 'text') {\n                return;\n            }\n            const { value } = node;\n            const values = value.split(/\\^/);\n            if (values.length === 1 || values.length % 2 === 0) {\n                return;\n            }\n            const children = values.map((str, i) => i % 2 === 0\n                ? {\n                    type: 'text',\n                    value: str\n                }\n                : {\n                    type: 'superscript',\n                    data: {\n                        hName: 'sup'\n                    },\n                    children: [\n                        {\n                            type: 'text',\n                            value: str\n                        }\n                    ]\n                });\n            parent.children.splice(i, 1, ...children);\n        });\n        // Subscript\n        visit(tree, ['text'], (node, i, parent) => {\n            if (node.type !== 'text') {\n                return;\n            }\n            const { value } = node;\n            // eslint-disable-next-line no-useless-escape\n            const values = value.split(/\\~/);\n            if (values.length === 1 || values.length % 2 === 0) {\n                return;\n            }\n            const children = values.map((str, i) => i % 2 === 0\n                ? {\n                    type: 'text',\n                    value: str\n                }\n                : {\n                    type: 'subscript',\n                    data: {\n                        hName: 'sub'\n                    },\n                    children: [\n                        {\n                            type: 'text',\n                            value: str\n                        }\n                    ]\n                });\n            parent.children.splice(i, 1, ...children);\n        });\n    };\n}\n"],
  "mappings": ";;;;;;;AAIe,SAAR,WAA4B;AAE/B,SAAO,CAAC,SAAS;AACb,UAAM,MAAM,CAAC,MAAM,GAAG,CAAC,MAAM,GAAG,WAAW;AACvC,UAAI,KAAK,SAAS,QAAQ;AACtB;AAAA,MACJ;AACA,YAAM,EAAE,MAAM,IAAI;AAClB,YAAM,SAAS,MAAM,MAAM,IAAI;AAC/B,UAAI,OAAO,WAAW,KAAK,OAAO,SAAS,MAAM,GAAG;AAChD;AAAA,MACJ;AACA,YAAM,WAAW,OAAO,IAAI,CAAC,KAAKA,OAAMA,KAAI,MAAM,IAC5C;AAAA,QACE,MAAM;AAAA,QACN,OAAO;AAAA,MACX,IACE;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,UACF,OAAO;AAAA,QACX;AAAA,QACA,UAAU;AAAA,UACN;AAAA,YACI,MAAM;AAAA,YACN,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ,CAAC;AACL,aAAO,SAAS,OAAO,GAAG,GAAG,GAAG,QAAQ;AAAA,IAC5C,CAAC;AAED,UAAM,MAAM,CAAC,MAAM,GAAG,CAAC,MAAM,GAAG,WAAW;AACvC,UAAI,KAAK,SAAS,QAAQ;AACtB;AAAA,MACJ;AACA,YAAM,EAAE,MAAM,IAAI;AAElB,YAAM,SAAS,MAAM,MAAM,IAAI;AAC/B,UAAI,OAAO,WAAW,KAAK,OAAO,SAAS,MAAM,GAAG;AAChD;AAAA,MACJ;AACA,YAAM,WAAW,OAAO,IAAI,CAAC,KAAKA,OAAMA,KAAI,MAAM,IAC5C;AAAA,QACE,MAAM;AAAA,QACN,OAAO;AAAA,MACX,IACE;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,UACF,OAAO;AAAA,QACX;AAAA,QACA,UAAU;AAAA,UACN;AAAA,YACI,MAAM;AAAA,YACN,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ,CAAC;AACL,aAAO,SAAS,OAAO,GAAG,GAAG,GAAG,QAAQ;AAAA,IAC5C,CAAC;AAAA,EACL;AACJ;",
  "names": ["i"]
}
