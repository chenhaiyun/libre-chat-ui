import {
  __commonJS,
  __toESM
} from "./chunk-5WWUZCGV.js";

// browser-external:node:path
var require_node_path = __commonJS({
  "browser-external:node:path"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:path" has been externalized for browser compatibility. Cannot access "node:path.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../node_modules/filename-reserved-regex/index.js
function filenameReservedRegex() {
  return /[<>:"/\\|?*\u0000-\u001F]/g;
}
function windowsReservedNameRegex() {
  return /^(con|prn|aux|nul|com\d|lpt\d)$/i;
}

// ../node_modules/filenamify/filenamify.js
var MAX_FILENAME_LENGTH = 100;
var reRelativePath = /^\.+(\\|\/)|^\.+$/;
var reTrailingPeriods = /\.+$/;
function filenamify(string, options = {}) {
  const reControlChars = /[\u0000-\u001F\u0080-\u009F]/g;
  const reRepeatedReservedCharacters = /([<>:"/\\|?*\u0000-\u001F]){2,}/g;
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  const replacement = options.replacement === void 0 ? "!" : options.replacement;
  if (filenameReservedRegex().test(replacement) && reControlChars.test(replacement)) {
    throw new Error("Replacement string cannot contain reserved filename characters");
  }
  if (replacement.length > 0) {
    string = string.replace(reRepeatedReservedCharacters, "$1");
  }
  string = string.normalize("NFD");
  string = string.replace(reRelativePath, replacement);
  string = string.replace(filenameReservedRegex(), replacement);
  string = string.replace(reControlChars, replacement);
  string = string.replace(reTrailingPeriods, "");
  if (replacement.length > 0) {
    const startedWithDot = string[0] === ".";
    if (!startedWithDot && string[0] === ".") {
      string = replacement + string;
    }
    if (string[string.length - 1] === ".") {
      string += replacement;
    }
  }
  string = windowsReservedNameRegex().test(string) ? string + replacement : string;
  const allowedLength = typeof options.maxLength === "number" ? options.maxLength : MAX_FILENAME_LENGTH;
  if (string.length > allowedLength) {
    const extensionIndex = string.lastIndexOf(".");
    if (extensionIndex === -1) {
      string = string.slice(0, allowedLength);
    } else {
      const filename = string.slice(0, extensionIndex);
      const extension = string.slice(extensionIndex);
      string = filename.slice(0, Math.max(1, allowedLength - extension.length)) + extension;
    }
  }
  return string;
}

// ../node_modules/filenamify/filenamify-path.js
var import_node_path = __toESM(require_node_path(), 1);
function filenamifyPath(filePath, options) {
  filePath = import_node_path.default.resolve(filePath);
  return import_node_path.default.join(import_node_path.default.dirname(filePath), filenamify(import_node_path.default.basename(filePath), options));
}
export {
  filenamify as default,
  filenamifyPath
};
//# sourceMappingURL=filenamify.js.map
